_Une rapide synthèse des marches à suivre pour créer un projet clacs et un aperçu de ses fonctionnalités_

Sommaire :

<wiki:toc max_depth="4" />


=Créer un projet=

Créer un nouveau Projet (New -> Project)

[http://clacs.googlecode.com/files/newProject.png]

Une fois créé, il est possible d'y ajouter un document gclacs_diagram. Ce nouveau document est automatiquement ouvert avec l'environnement GCLACS. Un document de type gclacs est en même temps généré.

[http://clacs.googlecode.com/files/newGCLACSDiagram2.png]


=Vue d'ensemble=

Comme dans tous les environnements de modélisation basés sur GMF, l'environnement GCLACS se décompose en : 

[http://clacs.googlecode.com/files/FenetrePrincipaleAnnotee.png]

 * (a) : la fenêtre principale, où l'on va placer les divers éléments graphiques issus de la palette 

 * (b) : la palette d'outils permettant la création des nœuds et des liens
 
 * (c) : l'onglet des propriétés décrivant les propriétés de l'élément sélectionné sur la fenêtre principale 

=Fonctionnalités=

Une fois que l'architecture souhaitée est réalisée, il suffit d'aller dans le menu CLACS pour se servir des fonctionnalités du Plugin. 
La fonctionnalité alors sélectionnée s'appliquera sur la page courante de l'éditeur graphique. En cas de mauvaise utilisation, un message précisera la cause du problème. 
L'architecture modélisée pourra successivement subit les différentes procédures :
 
==Architecture GCLACS vers Architecture CLACS==

Va générer un document en langage CLACS basé sur l'architecture modélisée.
{{{
<?xml version="1.0" encoding="UTF-8"?>
<cl:Component_Instance xmlns:cl="Metamodele/clacsCL" kind="business" name="instGlobalComp">
<cl:DefinedByDescriptor>GlobalComp</cl:DefinedByDescriptor>
	<cl:Component_Instance name="instCst">
		<cl:DefinedByDescriptor>Cst</cl:DefinedByDescriptor>
	</cl:Component_Instance>
	<cl:Component_Instance name="instCst2">
		<cl:DefinedByDescriptor>Cst2</cl:DefinedByDescriptor>
	</cl:Component_Instance>
	<cl:Component_Instance name="instComp">
		<cl:DefinedByDescriptor>Comp</cl:DefinedByDescriptor>
	</cl:Component_Instance>
	<cl:Port name="PPGComp">
		<cl:Direction>provided</cl:Direction>
		<cl:Visibility>internal</cl:Visibility>
		<cl:DefinedByInterface></cl:DefinedByInterface>
	</cl:Port>
	<cl:Port name="RPGComp">
		<cl:Direction>required</cl:Direction>
		<cl:Visibility>internal</cl:Visibility>
		<cl:DefinedByInterface></cl:DefinedByInterface>
	</cl:Port>
	<cl:Binding name="bindCstCst2" glue="false" kind="simple">
		<cl:Source>instCst.PPCst</cl:Source>
		<cl:Target>instCst2.RPCst2</cl:Target>
		<cl:UsedService name="serviceCst">
		</cl:UsedService>
	</cl:Binding>
	<cl:Binding name="bindCst2Comp" glue="false" kind="simple">
		<cl:Source>instCst2.PPCst2</cl:Source>
		<cl:Target>instComp.RPComp</cl:Target>
	</cl:Binding>
	<cl:Binding name="bindCompGComp" glue="false" kind="delegation">
		<cl:Source>instComp.PPComp</cl:Source>
		<cl:Target>PPGComp</cl:Target>
	</cl:Binding>
</cl:Component_Instance>
}}}

==Validation de l'architecture CLACS==
Va vérifier diverses "lois" à respecter.

Exemple : tous les éléments doivent être nommés

 
[http://clacs.googlecode.com/files/erreurValidation.png]

==Vérification des contraintes==

Va analyser les contraintes OCL décrites dans l'architecture. Un listing des contraintes et de leurs éventuels paramètres sera affiché pour présenter les résultats obtenus. Dans le cas où une contrainte serait invalidée ou syntaxiquement incorrecte, un message informera l'utilisateur, l'invitant à corriger les erreurs relevées. L'utilisateur est également prévenu lorsque le nombre de paramètre est différent du nombre d'arguments.
Exemple d'analyse de contraintes valides :

[http://clacs.googlecode.com/files/cstOK.png]

Exemple d'analyse de contraintes invalides :

[http://clacs.googlecode.com/files/cstFalse.png]

Exemple d'analyse de contraintes avec erreur de syntaxe OCL :

[http://clacs.googlecode.com/files/cstErr.png]

==Architecture CLACS vers code SCL==

Va générer le squelette du code SCL de l'architecture de composant décrite par le fichier CLACS sélectionné 
{{{
(SclBuilder new: #GlobalComp
	category: 'GlobalComp_category')
	requiredPorts:{};
	providedPorts:{}.

GlobalComp compile: '
init
	|instCst instCst2 instComp |
	instCst := Cst new.
	instCst2 := Cst2 new.
	instComp := Comp new.

	(instCst port: #PPCst) bindTo: (instCst2 port: #RPCst2).
	(instCst2 port: #PPCst2) bindTo: (instComp port: #RPComp).
	(instComp port: #PPComp) bindTo: PPGComp.
'.
}}}

==Charger dans Squeak==

Va démarrer l'éditeur Squeak avec en paramètre le fichier SCL courant

[http://clacs.googlecode.com/files/squeak.png]

Squeak est un éditeur graphique pour le langage SmallTalk (SCL étant un langage de composants basé sur SmallTalk)

Les différentes fenêtres d'interaction sont :

 * (1) : Permet de choisir la catégorie 

 * (2) : Permet de selectionner le descripteur de composant

 * (3) : Permet de choisir la catégorie de la méthode

 * (4) : Affiche l'ensemble des méthodes correspondant à la catégorie

 * (5) : Editeur pour éventuellement modifier la méthode

 * (6) : Le workspace où l'on peut executer des commandes 

 * (7) : Le transcript où les résultats sont visualisables