_Details the various "technical" components of the project in order to allow the future updates_

Summary:

<wiki:toc max_depth="4" />

=Maintenance=

==To Start==

To become familiar with the basics of the project: 
 * [http://www.eclipse.org/articles/Article-Using%20EMF/using-emf.html Tutorial EMF]

 * [http://wiki.eclipse.org/index.php/GMF_Tutorial Tutorial GMF]

 * [http://wiki.eclipse.org/GMF_Documentation_Index Notions plus avancees]

==Details of source files==


===Generated source files (unnecessary to modify) ===
Omong the source repertory CLACS.edit, CLACS.editor, CLACS.tests, GCLACS.edit, GCLACS.editor, GCLACS.tests are generated from emf and gmf models. It does not seem that it is necessary to modify them. 

===Generated source files (it is possible to be modified) ===
The repertory GCLACS.diagram is also generated, but it can be sometimes manually modified (to customize the environment with new classes).
The repertory CLACStoSCL_Plugin centralizes the interactions with the graphic design (1 Class by item of the plugin menu  and a package for generating the SCL code).

===source files: OCL constraints management ===
The repertory CLACS_OCLConst corresponds to an analyzer of OCL contraintes.
Think to generate a new executable jar in order to take it into account for GCLACS.
we present here the class diagram explaining the structure of the constraint plugin:
[http://clacs.googlecode.com/files/DiagrammeClasseConstraintPlugin.png]

These details are clearly simplified : 
 * « CaseAnalysis »  class will perform a case study of clacs input files. According to the type found, the corresponding Parsing class will be used.

 * La classe AccessorModel comprend un ensemble d'accesseurs pour le modèle instancié spécifié par le métamodèle GCLACS.

 * La classe SerializerXMI permet de sérialiser le modèle instancié en XMI, pour y effectuer des vérifications, tests etc.

 * La classe ConstraintInterpretor gère l'interprétation des contraintes OCL du modèle.

 * FenetreGUI est la classe gérant l'interface graphique, SoftConstraint est la classe contenant la fonction main. 
Enfin, les répertoires CLACS et GCLACS sont respectivement les cœurs du langage CLACS et celui de l'environnement graphique GCLACS. 

===Fichiers sources générés avec métamodèles ===
CLACS contient le méta-métamodèle ecore permettant de modéliser les spécifications du langage CLACS. 

==Modèles GMF==

GCLACS comprend le méta-métamodèle ecore gérant les aspects graphiques relatifs à l'environnement GCLACS. Il est complété par un ensemble de modèles gmf (gmfgraph, gmfgen, gmfmap et gmftool) reliés entre eux. Le dashboard ci-dessous montre les relations qu'ont les modèles entre eux pour former l'environnement GCLACS.

[http://clacs.googlecode.com/files/dashboard.png]


===Génération du code basé sur les modèles===

Lorsque l'on effectue des modifications sur le métamodèle ecore, il faut recharger le modèle genmodel. (Click droit sur le genmodel -> reload)

Une fois celui-ci rechargé, il suffit de faire un click droit dessus et faire "Generate All".

Lorsque des modifcations sont apportées au modèle gmfgraph, il faut regénérer les figures associées (Click droit -> Generate Figure Plug in), le nom du "main plugin" à mettre est "CLACS".

Si le modèle gmfmap est modifié, il faut créer le "Generator Model" (Clik droit).

Le modèle gmfgen centralise les modifications de tous les modèles, il faut donc le mettre à jour une fois que l'un des modèles à été mis à jour. (Click droit -> Generate Diagram Code). 

/!\ Lors de la génération de code, le code existant est écrasé même si des modifications manuelles ont été apportées. Pour y remédier, il suffit de faire précéder la fonction à ne pas regénérer par le mot clé NOT derrière la mention generated.

Exemple :
{{{

	/**
	 * @generated NOT
	 */
	protected NodeFigure createNodePlate() {
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode()
				.DPtoLP(40), getMapMode().DPtoLP(40));
		return result;
	}
}}}